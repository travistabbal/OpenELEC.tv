#!/bin/sh

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2011 Stephan Raue (stephan@openelec.tv)
#      Copyright (C) 2010-2011 Roman Weber (roman@openelec.tv)
#
#  This Program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This Program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.tv; see the file COPYING.  If not, write to
#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#  http://www.gnu.org/copyleft/gpl.html
################################################################################

UPDATE_DIR=/storage/.update

IMAGE_SYSTEM="SYSTEM"
IMAGE_KERNEL="KERNEL"
REBOOT="0"

# defaults for booting from an nbd root
NBD_ROOT_SERVER="192.168.1.1"
NBD_ROOT_PORT="2000"
NFS_OVERLAY="192.168.1.1:/var/lib/overlay"

# defaults for booting from an nfs root
NFS_ROOT_SERVER="192.168.1.1:/var/lib/tftpboot"
NFS_OVERLAY="192.168.1.1:/var/lib/overlay"

# mount all needed special filesystems
  /bin/busybox mount -t devtmpfs none /dev
  /bin/busybox mount -t proc none /proc
  /bin/busybox mount -t sysfs none /sys

# hide kernel log messages on console
  echo '1 4 1 7' > /proc/sys/kernel/printk

# parse command line arguments
  for arg in $(cat /proc/cmdline); do
    case $arg in
      debugging)
        DEBUG=yes
        ;;
      nosplash)
        SPLASH=no
        ;;
      bootchart)
        BOOTCHART=yes
        ;;
      fastboot)
        FASTBOOT=yes
        ;;
      netboot=*)
        NETBOOT="${arg#netboot=}"
        ;;
      nbdroot=*)
        nbdroot="${arg#nbdroot=}"
        NBD_ROOT_SERVER=$( echo "${nbdroot}" | /bin/busybox sed 's/:.*//')
        NBD_ROOT_PORT=$( echo "${nbdroot}" | /bin/busybox sed 's/.*://')
        ;;
      nbdserver=*)
        NBD_ROOT_SERVER="${arg#nbdserver=}"
        ;;
      nbdport=*)
        NBD_ROOT_PORT="${arg#nbdport=}"
        ;;
      nfsoverlay=*)
        NFS_OVERLAY="${arg#nfsoverlay=}"
        ;;
      nfsroot=*)
        NFS_ROOT_SERVER="${arg#nfsroot=}"
        ;;
    esac
  done

  if test "$FASTBOOT" = "yes"; then
    IONICE="/bin/busybox ionice -c 1 -n 0"
  fi

  progress() {
    if test "$DEBUG" = "yes"; then
      echo "### $1 ###"
    fi
  }

  show_splash() {
    if [ "$SPLASH" = "no" ]; then
      break
    else
      if [ -f "/sbin/ply-image" -a -f "/splash/splash.png" ]; then
        /sbin/ply-image /splash/splash.png
      fi
    fi
  }

  error() {
    echo "Error Code: $1 that means: $2"
  }

  debug_shell() {
    echo "### Starting debugging shell... type  exit  to quit ###"
    /bin/busybox sh </dev/tty1 >/dev/tty1 2>&1
  }

  mount_part() {
    progress "trying to mount $1 ..."
    for i in 1 2 3 4 5 6 7 8 9 10; do
      ERR_ENV=1
      if [ -z "$4" ]; then
        mount_opts="-o $3 $1 $2"
      else
        mount_opts="-t $4 -o $3 $1 $2"
      fi
      $IONICE /bin/busybox mount $mount_opts > /dev/null 2>&1
      [ "$?" -eq "0" ] && ERR_ENV=0 && break
      /bin/busybox usleep 1000000
    done
    [ "$ERR_ENV" -ne "0" ] && error "INIT_4" "Could not mount $1" && debug_shell
  }

  update() {
    if [ -f "$UPDATE_DIR/$2" ]; then
      echo "updating $1..."
        $IONICE /bin/busybox mount -o remount,rw /flash
        $IONICE /bin/busybox mv $UPDATE_DIR/$2 $3
        $IONICE /bin/busybox mount -o remount,ro /flash
        $IONICE /bin/busybox sync
        [ "$2" = "$IMAGE_KERNEL" ] && REBOOT="1"
    fi
  }

  mount_nbd() {
    retry_nr=0
    retry_delay=20
    OVERLAY_DIR=`cat /sys/class/net/eth0/address | /bin/busybox tr -d :`

    while [ ${retry_nr} -lt ${retry_delay} ] && [ ! -e /sysroot/sbin/init ]; do
      [ ${retry_nr} -gt 0 ] && \
      $IONICE /bin/busybox nbd-client $NBD_ROOT_SERVER $NBD_ROOT_PORT /dev/nbd0 && \
      mount_part "/dev/nbd0" "/sysroot" "ro" "squashfs"

      retry_nr=$(( ${retry_nr} + 1 ))

      [ ! -e /sysroot/sbin/init ] && /bin/busybox usleep 1000000

      [ ${retry_nr} -gt 0 ]
    done

    if [ ! -e /sysroot/sbin/init ]; then
      error "INIT_2" "Could not mount NBD root from $NBD_ROOT_SERVER port $NBD_ROOT_PORT"
      debug_shell
    fi
 
    mount_part "$NFS_OVERLAY" "/sysroot/storage" "rw,nolock,retrans=10" "nfs"

    if [ ! -d /sysroot/storage/$OVERLAY_DIR ]; then
      mkdir /sysroot/storage/$OVERLAY_DIR
    fi

    /bin/busybox umount /sysroot/storage
    mount_part "$NFS_OVERLAY/$OVERLAY_DIR" "/sysroot/storage" "rw,nolock" "nfs"
  }

  mount_nfs() {
    OVERLAY_DIR=`cat /sys/class/net/eth0/address | /bin/busybox tr -d :`

    mount_part "$NFS_ROOT_SERVER" "/flash" "ro,nolock" "nfs" 

    if [ -f "/flash/$IMAGE_SYSTEM" ]; then
      mount_part "/flash/$IMAGE_SYSTEM" "/sysroot" "ro,loop"
      [ "$ERR_ENV" -ne "0" ] && debug_shell
    else
      error "INIT_2" "Could not find system."
      debug_shell
    fi

    # move /flash and /storage to /sysroot
    /bin/busybox mount --move /flash /sysroot/flash

    if [ ! -e /sysroot/sbin/init ]; then
      error "INIT_2" "Could not mount NFS root from $NFS_ROOT_SERVER"
      debug_shell
    fi
 
    mount_part "$NFS_OVERLAY" "/sysroot/storage" "rw,nolock,retrans=10" "nfs"

    if [ ! -d /sysroot/storage/$OVERLAY_DIR ]; then
      mkdir /sysroot/storage/$OVERLAY_DIR
    fi

    /bin/busybox umount /sysroot/storage
    mount_part "$NFS_OVERLAY/$OVERLAY_DIR" "/sysroot/storage" "rw,nolock" "nfs"
  }

  mount_disk() {
    mount_part "$boot" "/flash" "ro,noatime"

    if [ -n "$disk" ]; then
      mount_part "$disk" "/storage" "rw,noatime"
      update "Kernel" "$IMAGE_KERNEL" "/flash/$IMAGE_KERNEL"
      update "System" "$IMAGE_SYSTEM" "/flash/$IMAGE_SYSTEM"

      if test "$REBOOT" -eq "1"; then
        echo "System reboots now..." && \
        /bin/busybox reboot
      fi
    fi

    if [ -f "/flash/$IMAGE_SYSTEM" ]; then
      mount_part "/flash/$IMAGE_SYSTEM" "/sysroot" "ro,loop"
      [ "$ERR_ENV" -ne "0" ] && debug_shell
    else
      error "INIT_2" "Could not find system."
      debug_shell
    fi

    # move /flash and /storage to /sysroot
    /bin/busybox mount --move /flash /sysroot/flash

    if [ -n "$disk" ]; then
      /bin/busybox mount --move /storage /sysroot/storage
    fi
  }

  show_splash

  if [ -z "$NETBOOT" ]; then
    mount_disk
  else
    if [ "$NETBOOT" = "nbd" ]; then
      mount_nbd
    elif [ "$NETBOOT" = "nfs" ]; then
      mount_nfs
    else
      error "INIT_2" "Could not find a valid netboot option. Please use nbd or nfs."
      debug_shell
    fi
  fi

  # unmount all other filesystems
  /bin/busybox umount /dev
  /bin/busybox umount /proc
  /bin/busybox umount /sys

# switch to new sysroot and start real init
  exec /bin/busybox switch_root /sysroot /sbin/init

  error "INIT_3" "Error in initramfs. Could not switch to new root"
  debug_shell
